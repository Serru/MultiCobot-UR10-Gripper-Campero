<?xml version="1.0"?>
<launch>
    <arg name="debug" default="false" />
    <arg unless="$(arg debug)" name="launch_prefix" value=""/>
    <arg if="$(arg debug)" name="launch_prefix" value="gdb --ex run --args"/>
    
    <!--arg name="robot_id" default="campero"/-->
    <arg name="robot_ip" default="192.168.0.210" doc="IP address by which the robot can be reached."/>
    
    <arg name="controller_config_file" default="$(find campero_robot_real_bring_up)/config/campero_ur10_controllers.yaml" doc="Config file used for defining the ROS-Control controllers."/>

    <arg name="kinematics_config" default="$(find campero_robot_real_bring_up)/config/campero_ur10_calibration.yaml" doc="Kinematics config file used for calibration correction. This will be used to verify the robot's calibration is matching the robot_description."/>
    
    <arg name="robot_description_file" default="$(find campero_robot_real_description)/urdf/campero_lm.urdf.xacro" doc="Robot description urdf xacro."/>

    <!-- Los siguientes parametros estan por defecto como en el ur10_bringup.launch -->
    <arg name="transmission_hw_interface" default="hardware_interface/PositionJointInterface"/>
    
    <arg name="controllers" default="joint_state_controller pos_joint_traj_controller robot_status_controller" doc="Controllers that are activated by default."/>

    <arg name="reverse_port" default="50001" doc="Port that will be opened by the driver to allow direct communication between the driver and the robot controller."/>
    
    <arg name="script_sender_port" default="50002" doc="The driver will offer an interface to receive the program's URScript on this port. If the robot cannot connect to this port, `External Control` will stop immediately."/>
    
    <arg name="tf_prefix" default="" doc="tf_prefix used for the robot."/>

    <arg name="stopped_controllers" default="joint_group_pos_controller" doc="Controllers that are initally loaded, but not started."/>
    
	
	<!-- start gripper node -->
    <arg name="robot_id" default="campero"/>
	<arg name="launch_fake_joints" default="false"/>
	<arg name="port" default="/dev/ttyUSB_GRIPPER"/>
	<arg name="gripper_name" default="robotiq_2f_gripper" />
	<arg name="min_gap" default="0" />
	<arg name="max_gap" default="0.085" /> <!-- meters -->
	<arg name="min_effort" default="30.0" />
	<arg name="max_effort" default="100.0" />

 
    

    <!-- Esto solo sirve si use_tool_communication=true
    <arg name="tool_voltage" default="0" doc="Tool voltage set at the beginning of the UR program. Only used, when `use_tool_communication` is set to true."/>
    <arg name="tool_parity" default="0" doc="Parity configuration used for tool communication. Only used, when `use_tool_communication` is set to true."/>
    <arg name="tool_baud_rate" default="115200" doc="Baud rate used for tool communication. Only used, when `use_tool_communication` is set to true."/>
    <arg name="tool_stop_bits" default="1" doc="Number of stop bits used for tool communication. Only used, when `use_tool_communication` is set to true."/>
    <arg name="tool_rx_idle_chars" default="1.5" doc="Number of idle chars in RX channel used for tool communication. Only used, when `use_tool_communication` is set to true."/>
    <arg name="tool_tx_idle_chars" default="3.5" doc="Number of idle chars in TX channel used for tool communication. Only used, when `use_tool_communication` is set to true."/>
    <arg name="tool_device_name" default="/tmp/ttyUR" doc="Local device name used for tool communication. Only used, when `use_tool_communication` is set to true."/>
    <arg name="tool_tcp_port" default="54321" doc="Port on which the robot controller publishes the tool comm interface. Only used, when `use_tool_communication` is set to true."/>
    -->

    <!-- Load urdf on the parameter server -->
    <param name="robot_description"
        command="$(find xacro)/xacro --inorder '$(arg robot_description_file)' transmission_hw_interface:=$(arg transmission_hw_interface) kinematics_config:=$(arg kinematics_config)"/>


    <!-- Convert joint states to /tf tranforms -->
    <!--En el campero llaman al nodo ur_state_publisher-->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>

    <!-- get the robot position [Own Script]-->
    <node name="ur10_robot_pose" pkg="campero_robot_real_bring_up" type="ur10_robot_pose.py" respawn="true" />

    <!-- send the arms commands [Own Script]-->
    <node name="cmd_ik_trajectory_pub" pkg="campero_robot_real_bring_up" type="pub_ik_trajectory.py" respawn="true" />

    <!-- send the gripper commands [Own Script]-->
    <node name="cmd_gripper_value_pub" pkg="campero_robot_real_bring_up" type="pub_gripper_cmd.py" respawn="true" />
    
    <!--node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" /-->
    
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find ur_description)/cfg/view_robot.rviz" required="true" />
  
    <!--node name="rviz" pkg="rviz" type="rviz" required="true" /-->

    <!-- Cargar driver --> 
    <include file="$(find ur_robot_driver)/launch/ur_control.launch">
        <arg name="debug" value="$(arg debug)"/>
        <arg name="use_tool_communication" value="false"/> <!-- creo que solo es para los e-series -->
        <arg name="controller_config_file" value="$(arg controller_config_file)"/>
        <arg name="robot_ip" value="$(arg robot_ip)"/>
        <arg name="reverse_port" value="$(arg reverse_port)"/>
        <arg name="script_sender_port" value="$(arg script_sender_port)"/>
        <arg name="kinematics_config" value="$(arg kinematics_config)"/>
        <arg name="tf_prefix" value="$(arg tf_prefix)"/>
        <arg name="controllers" value="$(arg controllers)"/>
        <arg name="stopped_controllers" value="$(arg stopped_controllers)"/>
        <arg name="headless_mode" value="false"/> <!-- Automatically send URScript to robot to execute -->
        
        <!-- solo sirve cuando use_tool_communication=true
        <arg name="tool_voltage" value="$(arg tool_voltage)"/>
        <arg name="tool_parity" value="$(arg tool_parity)"/>
        <arg name="tool_baud_rate" value="$(arg tool_baud_rate)"/>
        <arg name="tool_stop_bits" value="$(arg tool_stop_bits)"/>
        <arg name="tool_rx_idle_chars" value="$(arg tool_rx_idle_chars)"/>
        <arg name="tool_tx_idle_chars" value="$(arg tool_tx_idle_chars)"/>
        <arg name="tool_device_name" value="$(arg tool_device_name)"/>
        <arg name="tool_tcp_port" value="$(arg tool_tcp_port)"/>
        -->
    </include>
    
    <!-- -->
    <node name="$(arg gripper_name)" pkg="robotiq_2f_gripper_control" type="Robotiq2FGripperRtuNode.py" args="$(arg port)" respawn="true" respawn_delay="10" output="screen">
        <remap from="Robotiq2FGripperRobotInput" to="$(arg gripper_name)/input"/>
        <remap from="Robotiq2FGripperRobotOutput" to="$(arg gripper_name)/output"/>
    </node>
    
    <node name="$(arg gripper_name)_action_server" pkg="robotiq_2f_gripper_action_server" type="robotiq_2f_gripper_action_server_node" respawn="true" respawn_delay="10" output="screen">
	<param name="gripper_name" type="str" value="$(arg gripper_name)" />
	<param name="min_gap" type="double" value="$(arg min_gap)" />
	<param name="max_gap" type="double" value="$(arg max_gap)" />
	<param name="min_effort" type="double" value="$(arg min_effort)" />
	<param name="max_effort" type="double" value="$(arg max_effort)" />

	<remap from="input" to="$(arg gripper_name)/input" />
	<remap from="output" to="$(arg gripper_name)/output" />
    </node>
    
    <!-- Necessary to simulate fake position used in moveit when the gripper is connected to the arm-->
    <node if="$(arg launch_fake_joints)" name="fake_joint_publisher" pkg="campero_description" type="fake_joint_publisher.py" output="screen">
      <rosparam command="load" file="$(find campero_bringup)/config/2f_gripper_fake_joints.yaml"/>
    </node>
    
	<!--group ns="$(arg robot_id)"-->
		<!-- -->
		<node name="$(arg gripper_name)_controller" pkg="robotiq_2f_gripper_control" type="Robotiq2FGripperSimpleController.py" output="screen">
			<remap from="Robotiq2FGripperRobotOutput" to="$(arg gripper_name)/output"/>
		</node>
	<!--/group-->
</launch>
